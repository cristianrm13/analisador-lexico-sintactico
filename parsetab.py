
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'DOT EQUALS FOR ID INT LBRACE LESS_EQUAL LPAREN NUMBER OUT PLUS PLUSPLUS PRINTLN RBRACE RPAREN SEMICOLON STRINGstatement : FOR LPAREN INT ID EQUALS NUMBER SEMICOLON ID LESS_EQUAL NUMBER SEMICOLON ID PLUSPLUS RPAREN LBRACE print_statement RBRACEprint_statement : ID DOT OUT DOT PRINTLN LPAREN STRING PLUS NUMBER RPAREN SEMICOLON'
    
_lr_action_items = {'FOR':([0,],[2,]),'$end':([1,20,],[0,-1,]),'LPAREN':([2,23,],[3,24,]),'INT':([3,],[4,]),'ID':([4,8,12,16,],[5,9,13,17,]),'EQUALS':([5,],[6,]),'NUMBER':([6,10,26,],[7,11,27,]),'SEMICOLON':([7,11,28,],[8,12,29,]),'LESS_EQUAL':([9,],[10,]),'PLUSPLUS':([13,],[14,]),'RPAREN':([14,27,],[15,28,]),'LBRACE':([15,],[16,]),'DOT':([17,21,],[19,22,]),'RBRACE':([18,29,],[20,-2,]),'OUT':([19,],[21,]),'PRINTLN':([22,],[23,]),'STRING':([24,],[25,]),'PLUS':([25,],[26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'print_statement':([16,],[18,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> FOR LPAREN INT ID EQUALS NUMBER SEMICOLON ID LESS_EQUAL NUMBER SEMICOLON ID PLUSPLUS RPAREN LBRACE print_statement RBRACE','statement',17,'p_statement_for','parser.py',6),
  ('print_statement -> ID DOT OUT DOT PRINTLN LPAREN STRING PLUS NUMBER RPAREN SEMICOLON','print_statement',11,'p_print_statement','parser.py',14),
]
